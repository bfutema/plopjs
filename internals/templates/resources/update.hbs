import { injectable, inject } from 'tsyringe';

import { AppError } from '@shared/errors/AppError';

import { {{properCase entity_name}} } from '../app/typeorm/entities/{{properCase entity_name}}';
import { IUpdate{{properCase entity_name}} } from '../contracts/I{{properCase entity_name}}DTO';
import { I{{fromResourcesGetPluralized entity_name}}Repository } from '../repositories/I{{fromResourcesGetPluralized entity_name}}Repository';

@injectable()
class Update{{properCase entity_name}}Service {
  constructor(
    @inject('{{fromResourcesGetPluralized entity_name}}Repository')
    private {{fromResourcesGetEntityNamePluralizedVariable entity_name}}Repository: I{{fromResourcesGetPluralized entity_name}}Repository,
  ) {}

  public async execute({ id, ...rest }: IUpdate{{properCase entity_name}}): Promise<{{properCase entity_name}}> {
    const founded{{properCase entity_name}}ById = await this.{{fromResourcesGetEntityNamePluralizedVariable entity_name}}Repository.findById({ id });

    if (!founded{{properCase entity_name}}ById) {
      throw new AppError('{{properCase entity_name}} not found!', 404);
    }

    await this.{{fromResourcesGetEntityNamePluralizedVariable entity_name}}Repository.save({ ...founded{{properCase entity_name}}ById, ...rest });

    const updated{{properCase entity_name}} = await this.{{fromResourcesGetEntityNamePluralizedVariable entity_name}}Repository.findById({ id });

    return updated{{properCase entity_name}};
  }
}

export { Update{{properCase entity_name}}Service };
